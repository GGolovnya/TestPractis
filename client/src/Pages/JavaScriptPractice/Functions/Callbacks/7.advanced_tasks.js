// ============ Задача 1: Система событий с множественными обработчиками ============
/*
Чему научит:
- Работа с Map для хранения обработчиков
- Управление приоритетами выполнения
- Создание системы подписок на события

Применение в реальной разработке:
- Создание систем уведомлений
- Управление состоянием приложения
- Обработка пользовательских действий
*/

// ============ Подготовка исходных данных ============
const eventSystem = {
    handlers: new Map(),
    priorities: new Map()
};

// ============ Функция управления событиями ============
function eventManager(eventName, handler, priority) {
    // Ваш код здесь
}

// TODO: Создайте систему обработки событий, которая:
// 1. Позволяет регистрировать множество обработчиков на одно событие
// 2. Выполняет обработчики в порядке их приоритета
// 3. Обеспечивает возможность удаления обработчиков

// ============ Пример использования ============
const removeHandler = eventManager('userAction', (data) => {
    // Ваш код здесь
}, 1);
// console.log(eventSystem);

// ============ Задача 2: Механизм отложенного выполнения ============
/*
Чему научит:
- Работа с таймерами
- Управление асинхронными операциями
- Отмена и перезапуск задач

Применение в реальной разработке:
- Отложенная загрузка данных
- Автосохранение
- Планировщик задач
*/

// ============ Подготовка исходных данных ============
const taskQueue = new Map();

// ============ Функция управления задачами ============
function deferredExecution(taskId, callback, delay) {
    // Ваш код здесь
}

// TODO: Создайте систему управления задачами, которая:
// 1. Планирует выполнение задачи через указанное время
// 2. Позволяет отменить запланированную задачу
// 3. Дает возможность перезапустить отмененную задачу

// ============ Пример использования ============
const task = deferredExecution('task1', () => {
    // Ваш код здесь
}, 1000);
// task.cancel();
// task.restart();

// ============ Задача 3: Параллельное выполнение задач ============
/*
Чему научит:
- Управление параллельными процессами
- Ограничение количества одновременных операций
- Отслеживание прогресса выполнения

Применение в реальной разработке:
- Загрузка файлов
- Обработка очередей задач
- Параллельные вычисления
*/

// ============ Подготовка исходных данных ============
const tasks = [
    { id: 1, name: "Task 1", duration: 1000 },
    { id: 2, name: "Task 2", duration: 500 },
    { id: 3, name: "Task 3", duration: 800 }
];

// ============ Функция параллельного выполнения ============
function taskScheduler(tasks, maxConcurrent, callback) {
    // Ваш код здесь
}

// TODO: Создайте планировщик задач, который:
// 1. Выполняет задачи параллельно с ограничением их количества
// 2. Запускает новую задачу после завершения текущей
// 3. Отслеживает прогресс выполнения всех задач

// ============ Пример использования ============
taskScheduler(tasks, 2, (task) => {
    // Ваш код здесь
});
// console.log("Задачи запущены");