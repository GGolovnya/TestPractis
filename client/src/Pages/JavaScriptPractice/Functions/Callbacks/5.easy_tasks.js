// ============ Описание задачи: Обработка карточек товаров ============
/*
Чему научит:
- Работа с массивами данных через map()
- Форматирование данных для отображения
- Базовые математические операции
- Создание HTML-разметки

Применение в реальной разработке:
- Отображение товаров в интернет-магазине
- Форматирование данных из API для вывода на страницу
- Расчет скидок и акций
- Создание карточек товаров из базы данных
*/

// ============ Подготовка исходных данных ============
const products = [
    { id: 1, name: "Телефон", price: 500 },
    { id: 2, name: "Ноутбук", price: 1200 },
    { id: 3, name: "Планшет", price: 300 }
];

// ============ Основные функции обработки ============
// Функция для обработки массива товаров с callback
function processProducts(items, callback) {
    return items.map(callback);
}

// ============ TODO: Создание callback-функции ============
// Требования к реализации:
// 1. Добавляет скидку 10% к цене
// 2. Форматирует данные для отображения на странице
// 3. Добавляет HTML-разметку для карточки товара

// ============ Пример использования и ожидаемый результат ============
const formattedProducts = processProducts(products, item => {
   // Ваш код здесь
});
console.log(formattedProducts);

// Ожидаемый результат в консоли:
// [
//   '<div class="card">Телефон - 450$</div>',
//   '<div class="card">Ноутбук - 1080$</div>',
//   '<div class="card">Планшет - 270$</div>'
// ]

// ============ Задача 2: Фильтрация товаров по цене ============
/*
Чему научит:
- Фильтрация данных по условию
- Работа с методом filter()
- Сравнение значений

Применение в реальной разработке:
- Фильтрация товаров по цене на сайте
- Отбор данных по параметрам
- Создание систем поиска
- Фильтрация результатов запросов к БД
*/

// ============ Функция фильтрации ============
function filterProducts(items, maxPrice, callback) {
    return items.filter(callback);
}

// ============ TODO: Создание callback-функции фильтрации ============
// Требования к реализации:
// 1. Фильтрует товары дороже maxPrice
// 2. Возвращает true для товаров, которые нужно оставить
// 3. Возвращает false для товаров, которые нужно исключить

// ============ Пример использования фильтрации ============
const filteredProducts = filterProducts(products, 600, item => {
   // Ваш код здесь
});
console.log(filteredProducts);

// Ожидаемый результат в консоли (для maxPrice = 600):
// [
//   { id: 1, name: "Телефон", price: 500 },
//   { id: 3, name: "Планшет", price: 300 }
// ]

// ============ Задача 3: Сортировка товаров ============
/*
Чему научит:
- Работа с методом sort()
- Сравнение объектов
- Создание функций сравнения

Применение в реальной разработке:
- Сортировка товаров по цене/рейтингу/популярности
- Упорядочивание данных в таблицах
- Создание пользовательских сортировок
- Работа со списками в админ-панелях
*/

// ============ Функция сортировки ============
function sortProducts(items, callback) {
    return [...items].sort(callback);
}

// ============ TODO: Создание callback-функции сортировки ============
// Требования к реализации:
// 1. Сортирует товары по цене (от меньшей к большей)
// 2. Возвращает отрицательное число, если первый товар дешевле
// 3. Возвращает положительное число, если первый товар дороже

// ============ Пример использования сортировки ============
const sortedProducts = sortProducts(products, (a, b) => {
   // Ваш код здесь
});
console.log(sortedProducts);

// Ожидаемый результат в консоли:
// [
//   { id: 3, name: "Планшет", price: 300 },
//   { id: 1, name: "Телефон", price: 500 },
//   { id: 2, name: "Ноутбук", price: 1200 }
// ]